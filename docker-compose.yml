version: '3.8'

services:
  # Servicio Redis
  redis:
    image: redis:6-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - app-network

  # Servicio de Caché
  cache-service:
    build:
      context: ./Cache
      dockerfile: Dockerfile
    container_name: traffic-cache
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAX_CACHE_SIZE=1000
      - SIMILARITY_THRESHOLD=0.8
      - CACHE_TTL=7200
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  # Generador de Tráfico
  traffic-generator:
    build:
      context: ./Generador_trafico
      dockerfile: Dockerfile
    container_name: generador_de_trafico
    environment:
      - REDIS_HOST=redis
      - MONGO_URI=mongodb://admin:user@almacenamiento:27017/db
      - POISSON_LAMBDA=4
      - NORMAL_MEAN=60
    depends_on:
      - redis
      - cache-service
    networks:
      - app-network

  # MongoDB (Almacenamiento)
  almacenamiento:
    image: mongo:6.0
    container_name: mongo-db
    build:
      context: ./Almacenamiento
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: user
      MONGO_INITDB_DATABASE: db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    # Servicio de scrapping
  scraping:
    build:
      context: ./Scraper
      dockerfile: Dockerfile
    container_name: scrapper
    depends_on:
      - almacenamiento
volumes:
  redis_data:
  mongo_data:

networks:
  app-network:
    driver: bridge